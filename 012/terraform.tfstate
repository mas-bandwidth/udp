{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 245,
  "lineage": "680077f9-69b1-d771-8bf0-02a8512b0c78",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "archive_file",
      "name": "source_zip",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "d36f0473b4d9a6678f379a205448b2c3509ec3b5",
            "output_base64sha256": "r2mYw6ECPmTptOJ74Gq5u+fCEqY/ssHtpSM9Pz5aVNk=",
            "output_base64sha512": "niUGZmQoNK5Z2CE5UsCsW7BDUoTnHEeKCaVpTKnljTYDKsi0AmaAYRLMgMPJD5xlOA+a/hdBw7ih4E2zLXC+0g==",
            "output_file_mode": null,
            "output_md5": "b1c62c2639ab191eccf810d7e9023a4b",
            "output_path": "source-057.zip",
            "output_sha": "d36f0473b4d9a6678f379a205448b2c3509ec3b5",
            "output_sha256": "af6998c3a1023e64e9b4e27be06ab9bbe7c212a63fb2c1eda5233d3f3e5a54d9",
            "output_sha512": "9e250666642834ae59d8213952c0ac5bb0435284e71c478a09a5694ca9e58d36032ac8b40266806112cc80c3c90f9c65380f9afe1741c3b8a1e04db32d70bed2",
            "output_size": 6047,
            "source": [
              {
                "content": "/*\n    UDP server XDP program (Userspace)\n\n    Runs on Ubuntu 22.04 LTS 64bit with Linux Kernel 6.5+ *ONLY*\n*/\n\n#include \u003cmemory.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003csignal.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cassert.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cifaddrs.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cbpf/bpf.h\u003e\n#include \u003cbpf/libbpf.h\u003e\n#include \u003cxdp/libxdp.h\u003e\n\nstruct bpf_t\n{\n    int interface_index;\n    struct xdp_program * program;\n    bool attached_native;\n    bool attached_skb;\n};\n\nint bpf_init( struct bpf_t * bpf, const char * interface_name )\n{\n    // we can only run xdp programs as root\n\n    if ( geteuid() != 0 ) \n    {\n        printf( \"\\nerror: this program must be run as root\\n\\n\" );\n        return 1;\n    }\n\n    // find the network interface that matches the interface name\n    {\n        bool found = false;\n\n        struct ifaddrs * addrs;\n        if ( getifaddrs( \u0026addrs ) != 0 )\n        {\n            printf( \"\\nerror: getifaddrs failed\\n\\n\" );\n            return 1;\n        }\n\n        for ( struct ifaddrs * iap = addrs; iap != NULL; iap = iap-\u003eifa_next ) \n        {\n            if ( iap-\u003eifa_addr \u0026\u0026 ( iap-\u003eifa_flags \u0026 IFF_UP ) \u0026\u0026 iap-\u003eifa_addr-\u003esa_family == AF_INET )\n            {\n                struct sockaddr_in * sa = (struct sockaddr_in*) iap-\u003eifa_addr;\n                if ( strcmp( interface_name, iap-\u003eifa_name ) == 0 )\n                {\n                    printf( \"found network interface: '%s'\\n\", iap-\u003eifa_name );\n                    bpf-\u003einterface_index = if_nametoindex( iap-\u003eifa_name );\n                    if ( !bpf-\u003einterface_index ) \n                    {\n                        printf( \"\\nerror: if_nametoindex failed\\n\\n\" );\n                        return 1;\n                    }\n                    found = true;\n                    break;\n                }\n            }\n        }\n\n        freeifaddrs( addrs );\n\n        if ( !found )\n        {\n            printf( \"\\nerror: could not find any network interface matching '%s'\", interface_name );\n            return 1;\n        }\n    }\n\n    // load the server_xdp program and attach it to the network interface\n\n    printf( \"loading server_xdp...\\n\" );\n\n    bpf-\u003eprogram = xdp_program__open_file( \"server_xdp.o\", \"server_xdp\", NULL );\n    if ( libxdp_get_error( bpf-\u003eprogram ) ) \n    {\n        printf( \"\\nerror: could not load server_xdp program\\n\\n\");\n        return 1;\n    }\n\n    printf( \"server_xdp loaded successfully.\\n\" );\n\n    printf( \"attaching server_xdp to network interface\\n\" );\n\n    int ret = xdp_program__attach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_NATIVE, 0 );\n    if ( ret == 0 )\n    {\n        bpf-\u003eattached_native = true;\n    } \n    else\n    {\n        printf( \"falling back to skb mode...\\n\" );\n        ret = xdp_program__attach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_SKB, 0 );\n        if ( ret == 0 )\n        {\n            bpf-\u003eattached_skb = true;\n        }\n        else\n        {\n            printf( \"\\nerror: failed to attach server_xdp program to interface\\n\\n\" );\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nvoid bpf_shutdown( struct bpf_t * bpf )\n{\n    assert( bpf );\n\n    if ( bpf-\u003eprogram != NULL )\n    {\n        if ( bpf-\u003eattached_native )\n        {\n            xdp_program__detach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_NATIVE, 0 );\n        }\n        if ( bpf-\u003eattached_skb )\n        {\n            xdp_program__detach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_SKB, 0 );\n        }\n        xdp_program__close( bpf-\u003eprogram );\n    }\n}\n\nstatic struct bpf_t bpf;\n\nvolatile bool quit;\n\nvoid interrupt_handler( int signal )\n{\n    (void) signal; quit = true;\n}\n\nvoid clean_shutdown_handler( int signal )\n{\n    (void) signal;\n    quit = true;\n}\n\nstatic void cleanup()\n{\n    bpf_shutdown( \u0026bpf );\n    fflush( stdout );\n}\n\nint main( int argc, char *argv[] )\n{\n    signal( SIGINT,  interrupt_handler );\n    signal( SIGTERM, clean_shutdown_handler );\n    signal( SIGHUP,  clean_shutdown_handler );\n\n    if ( argc != 2 )\n    {\n        printf( \"\\nusage: server \u003cinterface name\u003e\\n\\n\" );\n        return 1;\n    }\n\n    const char * interface_name = argv[1];\n\n    if ( bpf_init( \u0026bpf, interface_name ) != 0 )\n    {\n        cleanup();\n        return 1;\n    }\n\n    while ( !quit )\n    {\n        usleep( 1000000 );\n    }\n\n    cleanup();\n\n    printf( \"\\n\" );\n\n    return 0;\n}\n",
                "filename": "server.c"
              },
              {
                "content": "/*\n    UDP server XDP program\n\n    Replies to 100 byte UDP packets sent to port 40000 with the fnv1a 64bit hash (8 bytes)\n\n    USAGE:\n\n        clang -Ilibbpf/src -g -O2 -target bpf -c server_xdp.c -o server_xdp.o\n        sudo cat /sys/kernel/debug/tracing/trace_pipe\n*/\n\n#include \u003clinux/in.h\u003e\n#include \u003clinux/if_ether.h\u003e\n#include \u003clinux/if_packet.h\u003e\n#include \u003clinux/if_vlan.h\u003e\n#include \u003clinux/ip.h\u003e\n#include \u003clinux/ipv6.h\u003e\n#include \u003clinux/udp.h\u003e\n#include \u003clinux/bpf.h\u003e\n#include \u003clinux/string.h\u003e\n#include \u003cbpf/bpf_helpers.h\u003e\n\n#if defined(__BYTE_ORDER__) \u0026\u0026 defined(__ORDER_LITTLE_ENDIAN__) \u0026\u0026 \\\n    __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n#define bpf_ntohs(x)        __builtin_bswap16(x)\n#define bpf_htons(x)        __builtin_bswap16(x)\n#elif defined(__BYTE_ORDER__) \u0026\u0026 defined(__ORDER_BIG_ENDIAN__) \u0026\u0026 \\\n    __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n#define bpf_ntohs(x)        (x)\n#define bpf_htons(x)        (x)\n#else\n# error \"Endianness detection needs to be set up for your compiler?!\"\n#endif\n\n//#define DEBUG 1\n\n#if DEBUG\n#define debug_printf bpf_printk\n#else // #if DEBUG\n#define debug_printf(...) do { } while (0)\n#endif // #if DEBUG\n\nstatic void reflect_packet( void * data, int payload_bytes )\n{\n    struct ethhdr * eth = data;\n    struct iphdr  * ip  = data + sizeof( struct ethhdr );\n    struct udphdr * udp = (void*) ip + sizeof( struct iphdr );\n\n    __u16 a = udp-\u003esource;\n    udp-\u003esource = udp-\u003edest;\n    udp-\u003edest = a;\n    udp-\u003echeck = 0;\n    udp-\u003elen = bpf_htons( sizeof(struct udphdr) + payload_bytes );\n\n    __u32 b = ip-\u003esaddr;\n    ip-\u003esaddr = ip-\u003edaddr;\n    ip-\u003edaddr = b;\n    ip-\u003etot_len = bpf_htons( sizeof(struct iphdr) + sizeof(struct udphdr) + payload_bytes );\n    ip-\u003echeck = 0;\n\n    char c[ETH_ALEN];\n    memcpy( c, eth-\u003eh_source, ETH_ALEN );\n    memcpy( eth-\u003eh_source, eth-\u003eh_dest, ETH_ALEN );\n    memcpy( eth-\u003eh_dest, c, ETH_ALEN );\n\n    __u16 * p = (__u16*) ip;\n    __u32 checksum = p[0];\n    checksum += p[1];\n    checksum += p[2];\n    checksum += p[3];\n    checksum += p[4];\n    checksum += p[5];\n    checksum += p[6];\n    checksum += p[7];\n    checksum += p[8];\n    checksum += p[9];\n    checksum = ~ ( ( checksum \u0026 0xFFFF ) + ( checksum \u003e\u003e 16 ) );\n    ip-\u003echeck = checksum;\n}\n\nSEC(\"server_xdp\") int server_xdp_filter( struct xdp_md *ctx ) \n{ \n    void * data = (void*) (long) ctx-\u003edata; \n\n    void * data_end = (void*) (long) ctx-\u003edata_end; \n\n    struct ethhdr * eth = data;\n\n    if ( (void*)eth + sizeof(struct ethhdr) \u003c data_end )\n    {\n        if ( eth-\u003eh_proto == __constant_htons(ETH_P_IP) ) // IPV4\n        {\n            struct iphdr * ip = data + sizeof(struct ethhdr);\n\n            if ( (void*)ip + sizeof(struct iphdr) \u003c data_end )\n            {\n                if ( ip-\u003eprotocol == IPPROTO_UDP ) // UDP\n                {\n                    struct udphdr * udp = (void*) ip + sizeof(struct iphdr);\n\n                    if ( (void*)udp + sizeof(struct udphdr) \u003c= data_end )\n                    {\n                        if ( udp-\u003edest == __constant_htons(40000) )\n                        {\n                            void * payload = (void*) udp + sizeof(struct udphdr);\n                            int payload_bytes = data_end - payload;\n                            if ( payload_bytes == 100 )\n                            {\n                                reflect_packet( data, 8 );\n                                bpf_xdp_adjust_tail( ctx, -( payload_bytes - 8 ) );\n                                return XDP_TX;\n                            }\n                            else\n                            {\n                                return XDP_DROP;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return XDP_PASS;\n}\n\nchar _license[] SEC(\"license\") = \"GPL\";\n",
                "filename": "server_xdp.c"
              },
              {
                "content": "[Unit]\nDescription=UDP Backend Service\n\n[Service]\nExecStart=/app/backend\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
                "filename": "backend.service"
              },
              {
                "content": "[Unit]\nDescription=UDP Client Service\n\n[Service]\nExecStart=/app/client\nEnvironmentFile=/app/client.env\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
                "filename": "client.service"
              },
              {
                "content": "[Unit]\nDescription=UDP Server Service\n\n[Service]\nExecStart=/app/server ens3\nWorkingDirectory=/app\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
                "filename": "server.service"
              },
              {
                "content": "\nKERNEL = $(shell uname -r)\n\n.PHONY: build\nbuild: server.c server_xdp.o\n\tgcc -O2 -g server.c -o server -lxdp /usr/src/linux-headers-$(KERNEL)/tools/bpf/resolve_btfids/libbpf/libbpf.a -lz -lelf\n\nserver_xdp.o: server_xdp.c\n\tclang -O2 -g -Ilibbpf/src -target bpf -c server_xdp.c -o server_xdp.o\n\n.PHONY: clean\nclean:\n\trm -f server\n\trm -f *.o",
                "filename": "Makefile"
              },
              {
                "content": "module github.com/mas-bandwidth/udp/012\n",
                "filename": "go.mod"
              },
              {
                "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"strconv\"\n\t\"sync/atomic\"\n\t\"math/rand\"\n)\n\nconst StartPort = 10000\nconst MaxPacketSize = 1500\nconst SocketBufferSize = 256*1024*1024\n\nvar numClients int\n\nvar quit uint64\nvar packetsSent uint64\nvar packetsReceived uint64\n\nfunc GetInt(name string, defaultValue int) int {\n\tvalueString, ok := os.LookupEnv(name)\n\tif !ok {\n\t\treturn defaultValue\n\t}\n\tvalue, err := strconv.ParseInt(valueString, 10, 64)\n\tif err != nil {\n\t\treturn defaultValue\n\t}\n\treturn int(value)\n}\n\nfunc GetAddress(name string, defaultValue string) net.UDPAddr {\n\tvalueString, ok := os.LookupEnv(name)\n\tif !ok {\n\t    valueString = defaultValue\n\t}\n\tvalue, err := net.ResolveUDPAddr(\"udp\", valueString)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"invalid address in envvar %s\", name))\n\t}\n\treturn *value\n}\n\nfunc main() {\n\n\tserverAddress := GetAddress(\"SERVER_ADDRESS\", \"127.0.0.1:40000\")\n\n\tnumClients = GetInt(\"NUM_CLIENTS\", 1)\n\n\tfmt.Printf(\"starting %d clients\\n\", numClients)\n\n\tfmt.Printf(\"server address is %s\\n\", serverAddress.String())\n\n\tvar wg sync.WaitGroup\n\n\tfor i := 0; i \u003c numClients; i++ {\n\t\tgo func(clientIndex int) {\n\t\t\twg.Add(1)\n\t\t\trunClient(clientIndex, \u0026serverAddress)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\n\ttermChan := make(chan os.Signal, 1)\n\n\tsignal.Notify(termChan, os.Interrupt, syscall.SIGTERM)\n\n\tticker := time.NewTicker(time.Second)\n \n\tprev_sent := uint64(0)\n\tprev_received := uint64(0)\n\n \tfor {\n\t\tselect {\n\t\tcase \u003c-termChan:\n\t\t\tfmt.Printf(\"\\nreceived shutdown signal\\n\")\n\t\t\tatomic.StoreUint64(\u0026quit, 1)\n\t \tcase \u003c-ticker.C:\n\t \t\tsent := atomic.LoadUint64(\u0026packetsSent)\n\t \t\treceived := atomic.LoadUint64(\u0026packetsReceived)\n\t \t\tsent_delta := sent - prev_sent\n\t \t\treceived_delta := received - prev_received\n\t \t\tfmt.Printf(\"sent delta %d, received delta %d\\n\", sent_delta, received_delta)\n\t\t\tprev_sent = sent\n\t\t\tprev_received = received\n\t \t}\n\t\tquit := atomic.LoadUint64(\u0026quit)\n\t\tif quit != 0 {\n\t\t\tbreak\n\t\t}\n \t}\n\n\tfmt.Printf(\"shutting down\\n\")\n\n\twg.Wait()\t\n\n\tfmt.Printf(\"done.\\n\")\n}\n\nfunc runClient(clientIndex int, serverAddress *net.UDPAddr) {\n\n\taddr := net.UDPAddr{\n\t    Port: StartPort + clientIndex,\n\t    IP:   net.ParseIP(\"0.0.0.0\"),\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", \u0026addr)\n\tif err != nil {\n\t\treturn // IMPORTANT: to get as many clients as possible on one machine, if we can't bind to a specific port, just ignore and carry on\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.SetReadBuffer(SocketBufferSize); err != nil {\n\t\tpanic(fmt.Sprintf(\"could not set socket read buffer size: %v\", err))\n\t}\n\n\tif err := conn.SetWriteBuffer(SocketBufferSize); err != nil {\n\t\tpanic(fmt.Sprintf(\"could not set socket write buffer size: %v\", err))\n\t}\n\n\tbuffer := make([]byte, MaxPacketSize)\n\n\tgo func() {\n\t\tfor {\n\t\t\tpacketBytes, _, err := conn.ReadFromUDP(buffer)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif packetBytes != 8 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tatomic.AddUint64(\u0026packetsReceived, 1)\n\t\t}\n\t}()\n\n\tpacketData := make([]byte, 100)\n\n\trand.Read(packetData)\n\n\tfor {\n\t\tquit := atomic.LoadUint64(\u0026quit)\n\t\tif quit != 0 {\n\t\t\tbreak\n\t\t}\n\t\tfor i := 0; i \u003c 10; i++ {\n\t\t\tconn.WriteToUDP(packetData[:], serverAddress)\n\t\t}\n\t\tatomic.AddUint64(\u0026packetsSent, 10)\n\t\ttime.Sleep(time.Millisecond*100)\n\t}\n}\n",
                "filename": "client.go"
              },
              {
                "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"io\"\n\t\"hash/fnv\"\n\t\"net/http\"\n\t\"encoding/binary\"\n)\n\nconst BackendPort = 50000\nconst RequestsPerBlock = 100\nconst RequestSize = 4 + 2 + 100\nconst ResponseSize = 4 + 2 + 8\nconst BlockSize = RequestsPerBlock * RequestSize\n\nfunc main() {\n\tfmt.Printf(\"starting backend on port %d\\n\", BackendPort)\n\thttp.HandleFunc(\"/hash\", hash)\n\terr := http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%d\", BackendPort), nil)\n\tif err != nil {\n\t\tfmt.Printf(\"error: error starting http server: %v\", err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc hash(w http.ResponseWriter, req *http.Request) {\n\trequest, err := io.ReadAll(req.Body)\n\tif err != nil || len(request) != BlockSize {\n\t\t// todo\n\t\tfmt.Printf(\"wrong request size\\n\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\t// todo\n\tfmt.Printf(\"processing request\\n\")\n\trequestIndex := 0\n\tresponseIndex := 0\n\tresponse := [ResponseSize*RequestsPerBlock]byte{}\n\tfor i := 0; i \u003c RequestsPerBlock; i++ {\n\t\tcopy(response[responseIndex:responseIndex+6], request[requestIndex:requestIndex+6])\n\t\thash := fnv.New64a()\n\t\thash.Write(request)\n\t\tdata := hash.Sum64()\n\t\tbinary.LittleEndian.PutUint64(response[responseIndex+6:responseIndex+6+8], data)\n\t\trequestIndex += RequestSize\n\t\tresponseIndex += ResponseSize\n\t}\n\tw.Write(response[:])\n}\n",
                "filename": "backend.go"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "backend_go",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"io\"\n\t\"hash/fnv\"\n\t\"net/http\"\n\t\"encoding/binary\"\n)\n\nconst BackendPort = 50000\nconst RequestsPerBlock = 100\nconst RequestSize = 4 + 2 + 100\nconst ResponseSize = 4 + 2 + 8\nconst BlockSize = RequestsPerBlock * RequestSize\n\nfunc main() {\n\tfmt.Printf(\"starting backend on port %d\\n\", BackendPort)\n\thttp.HandleFunc(\"/hash\", hash)\n\terr := http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%d\", BackendPort), nil)\n\tif err != nil {\n\t\tfmt.Printf(\"error: error starting http server: %v\", err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc hash(w http.ResponseWriter, req *http.Request) {\n\trequest, err := io.ReadAll(req.Body)\n\tif err != nil || len(request) != BlockSize {\n\t\t// todo\n\t\tfmt.Printf(\"wrong request size\\n\")\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\t// todo\n\tfmt.Printf(\"processing request\\n\")\n\trequestIndex := 0\n\tresponseIndex := 0\n\tresponse := [ResponseSize*RequestsPerBlock]byte{}\n\tfor i := 0; i \u003c RequestsPerBlock; i++ {\n\t\tcopy(response[responseIndex:responseIndex+6], request[requestIndex:requestIndex+6])\n\t\thash := fnv.New64a()\n\t\thash.Write(request)\n\t\tdata := hash.Sum64()\n\t\tbinary.LittleEndian.PutUint64(response[responseIndex+6:responseIndex+6+8], data)\n\t\trequestIndex += RequestSize\n\t\tresponseIndex += ResponseSize\n\t}\n\tw.Write(response[:])\n}\n",
            "content_base64": "cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJvcyIKCSJpbyIKCSJoYXNoL2ZudiIKCSJuZXQvaHR0cCIKCSJlbmNvZGluZy9iaW5hcnkiCikKCmNvbnN0IEJhY2tlbmRQb3J0ID0gNTAwMDAKY29uc3QgUmVxdWVzdHNQZXJCbG9jayA9IDEwMApjb25zdCBSZXF1ZXN0U2l6ZSA9IDQgKyAyICsgMTAwCmNvbnN0IFJlc3BvbnNlU2l6ZSA9IDQgKyAyICsgOApjb25zdCBCbG9ja1NpemUgPSBSZXF1ZXN0c1BlckJsb2NrICogUmVxdWVzdFNpemUKCmZ1bmMgbWFpbigpIHsKCWZtdC5QcmludGYoInN0YXJ0aW5nIGJhY2tlbmQgb24gcG9ydCAlZFxuIiwgQmFja2VuZFBvcnQpCglodHRwLkhhbmRsZUZ1bmMoIi9oYXNoIiwgaGFzaCkKCWVyciA6PSBodHRwLkxpc3RlbkFuZFNlcnZlKGZtdC5TcHJpbnRmKCIwLjAuMC4wOiVkIiwgQmFja2VuZFBvcnQpLCBuaWwpCglpZiBlcnIgIT0gbmlsIHsKCQlmbXQuUHJpbnRmKCJlcnJvcjogZXJyb3Igc3RhcnRpbmcgaHR0cCBzZXJ2ZXI6ICV2IiwgZXJyKQoJCW9zLkV4aXQoMSkKCX0KfQoKZnVuYyBoYXNoKHcgaHR0cC5SZXNwb25zZVdyaXRlciwgcmVxICpodHRwLlJlcXVlc3QpIHsKCXJlcXVlc3QsIGVyciA6PSBpby5SZWFkQWxsKHJlcS5Cb2R5KQoJaWYgZXJyICE9IG5pbCB8fCBsZW4ocmVxdWVzdCkgIT0gQmxvY2tTaXplIHsKCQkvLyB0b2RvCgkJZm10LlByaW50Zigid3JvbmcgcmVxdWVzdCBzaXplXG4iKQoJCXcuV3JpdGVIZWFkZXIoaHR0cC5TdGF0dXNCYWRSZXF1ZXN0KQoJCXJldHVybgoJfQoJLy8gdG9kbwoJZm10LlByaW50ZigicHJvY2Vzc2luZyByZXF1ZXN0XG4iKQoJcmVxdWVzdEluZGV4IDo9IDAKCXJlc3BvbnNlSW5kZXggOj0gMAoJcmVzcG9uc2UgOj0gW1Jlc3BvbnNlU2l6ZSpSZXF1ZXN0c1BlckJsb2NrXWJ5dGV7fQoJZm9yIGkgOj0gMDsgaSA8IFJlcXVlc3RzUGVyQmxvY2s7IGkrKyB7CgkJY29weShyZXNwb25zZVtyZXNwb25zZUluZGV4OnJlc3BvbnNlSW5kZXgrNl0sIHJlcXVlc3RbcmVxdWVzdEluZGV4OnJlcXVlc3RJbmRleCs2XSkKCQloYXNoIDo9IGZudi5OZXc2NGEoKQoJCWhhc2guV3JpdGUocmVxdWVzdCkKCQlkYXRhIDo9IGhhc2guU3VtNjQoKQoJCWJpbmFyeS5MaXR0bGVFbmRpYW4uUHV0VWludDY0KHJlc3BvbnNlW3Jlc3BvbnNlSW5kZXgrNjpyZXNwb25zZUluZGV4KzYrOF0sIGRhdGEpCgkJcmVxdWVzdEluZGV4ICs9IFJlcXVlc3RTaXplCgkJcmVzcG9uc2VJbmRleCArPSBSZXNwb25zZVNpemUKCX0KCXcuV3JpdGUocmVzcG9uc2VbOl0pCn0K",
            "content_base64sha256": "TB+M8hbY0VtouC9DlMYOSbLHRLsWpsWLVr3G3xvCMvg=",
            "content_base64sha512": "+/44ovJD5SSbcT4HKF9oHbwjo37A8vbeeUJRXNQCBVuyi50z1gXk6Sai0cvz1yN92DbMPpYw/g/3DxI9wtRMWw==",
            "content_md5": "425209b84eddb09307ae0e31a4fdc238",
            "content_sha1": "205f0e44dcc351480d673977276c9c939be1631e",
            "content_sha256": "4c1f8cf216d8d15b68b82f4394c60e49b2c744bb16a6c58b56bdc6df1bc232f8",
            "content_sha512": "fbfe38a2f243e5249b713e07285f681dbc23a37ec0f2f6de7942515cd402055bb28b9d33d605e4e926a2d1cbf3d7237dd836cc3e9630fe0ff70f123dc2d44c5b",
            "filename": "backend.go",
            "id": "205f0e44dcc351480d673977276c9c939be1631e"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "backend_service",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "[Unit]\nDescription=UDP Backend Service\n\n[Service]\nExecStart=/app/backend\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
            "content_base64": "W1VuaXRdCkRlc2NyaXB0aW9uPVVEUCBCYWNrZW5kIFNlcnZpY2UKCltTZXJ2aWNlXQpFeGVjU3RhcnQ9L2FwcC9iYWNrZW5kClJlc3RhcnQ9YWx3YXlzClJlc3RhcnRTZWM9MzAKVGltZW91dFN0b3BTZWM9OTAK",
            "content_base64sha256": "aa5RzUe3S0nKGzcCETwnJmKReVTqc3VB6mQx2jpsT+A=",
            "content_base64sha512": "tQon9VdC7PiseirlXD0FVHR4p85X2LApgn9Hmawe4UKsl2jj3evZakmoYatUIjcWlcyEtZN7A9xxhdsu/BJfJA==",
            "content_md5": "8a5314b513fc681dea3daa93f7f73808",
            "content_sha1": "bcb7130ad1cee27bd9bdbee7786e9ce24cd453ea",
            "content_sha256": "69ae51cd47b74b49ca1b3702113c272662917954ea737541ea6431da3a6c4fe0",
            "content_sha512": "b50a27f55742ecf8ac7a2ae55c3d05547478a7ce57d8b029827f4799ac1ee142ac9768e3ddebd96a49a861ab5422371695cc84b5937b03dc7185db2efc125f24",
            "filename": "backend.service",
            "id": "bcb7130ad1cee27bd9bdbee7786e9ce24cd453ea"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "client_go",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"strconv\"\n\t\"sync/atomic\"\n\t\"math/rand\"\n)\n\nconst StartPort = 10000\nconst MaxPacketSize = 1500\nconst SocketBufferSize = 256*1024*1024\n\nvar numClients int\n\nvar quit uint64\nvar packetsSent uint64\nvar packetsReceived uint64\n\nfunc GetInt(name string, defaultValue int) int {\n\tvalueString, ok := os.LookupEnv(name)\n\tif !ok {\n\t\treturn defaultValue\n\t}\n\tvalue, err := strconv.ParseInt(valueString, 10, 64)\n\tif err != nil {\n\t\treturn defaultValue\n\t}\n\treturn int(value)\n}\n\nfunc GetAddress(name string, defaultValue string) net.UDPAddr {\n\tvalueString, ok := os.LookupEnv(name)\n\tif !ok {\n\t    valueString = defaultValue\n\t}\n\tvalue, err := net.ResolveUDPAddr(\"udp\", valueString)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"invalid address in envvar %s\", name))\n\t}\n\treturn *value\n}\n\nfunc main() {\n\n\tserverAddress := GetAddress(\"SERVER_ADDRESS\", \"127.0.0.1:40000\")\n\n\tnumClients = GetInt(\"NUM_CLIENTS\", 1)\n\n\tfmt.Printf(\"starting %d clients\\n\", numClients)\n\n\tfmt.Printf(\"server address is %s\\n\", serverAddress.String())\n\n\tvar wg sync.WaitGroup\n\n\tfor i := 0; i \u003c numClients; i++ {\n\t\tgo func(clientIndex int) {\n\t\t\twg.Add(1)\n\t\t\trunClient(clientIndex, \u0026serverAddress)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\n\ttermChan := make(chan os.Signal, 1)\n\n\tsignal.Notify(termChan, os.Interrupt, syscall.SIGTERM)\n\n\tticker := time.NewTicker(time.Second)\n \n\tprev_sent := uint64(0)\n\tprev_received := uint64(0)\n\n \tfor {\n\t\tselect {\n\t\tcase \u003c-termChan:\n\t\t\tfmt.Printf(\"\\nreceived shutdown signal\\n\")\n\t\t\tatomic.StoreUint64(\u0026quit, 1)\n\t \tcase \u003c-ticker.C:\n\t \t\tsent := atomic.LoadUint64(\u0026packetsSent)\n\t \t\treceived := atomic.LoadUint64(\u0026packetsReceived)\n\t \t\tsent_delta := sent - prev_sent\n\t \t\treceived_delta := received - prev_received\n\t \t\tfmt.Printf(\"sent delta %d, received delta %d\\n\", sent_delta, received_delta)\n\t\t\tprev_sent = sent\n\t\t\tprev_received = received\n\t \t}\n\t\tquit := atomic.LoadUint64(\u0026quit)\n\t\tif quit != 0 {\n\t\t\tbreak\n\t\t}\n \t}\n\n\tfmt.Printf(\"shutting down\\n\")\n\n\twg.Wait()\t\n\n\tfmt.Printf(\"done.\\n\")\n}\n\nfunc runClient(clientIndex int, serverAddress *net.UDPAddr) {\n\n\taddr := net.UDPAddr{\n\t    Port: StartPort + clientIndex,\n\t    IP:   net.ParseIP(\"0.0.0.0\"),\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", \u0026addr)\n\tif err != nil {\n\t\treturn // IMPORTANT: to get as many clients as possible on one machine, if we can't bind to a specific port, just ignore and carry on\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.SetReadBuffer(SocketBufferSize); err != nil {\n\t\tpanic(fmt.Sprintf(\"could not set socket read buffer size: %v\", err))\n\t}\n\n\tif err := conn.SetWriteBuffer(SocketBufferSize); err != nil {\n\t\tpanic(fmt.Sprintf(\"could not set socket write buffer size: %v\", err))\n\t}\n\n\tbuffer := make([]byte, MaxPacketSize)\n\n\tgo func() {\n\t\tfor {\n\t\t\tpacketBytes, _, err := conn.ReadFromUDP(buffer)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif packetBytes != 8 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tatomic.AddUint64(\u0026packetsReceived, 1)\n\t\t}\n\t}()\n\n\tpacketData := make([]byte, 100)\n\n\trand.Read(packetData)\n\n\tfor {\n\t\tquit := atomic.LoadUint64(\u0026quit)\n\t\tif quit != 0 {\n\t\t\tbreak\n\t\t}\n\t\tfor i := 0; i \u003c 10; i++ {\n\t\t\tconn.WriteToUDP(packetData[:], serverAddress)\n\t\t}\n\t\tatomic.AddUint64(\u0026packetsSent, 10)\n\t\ttime.Sleep(time.Millisecond*100)\n\t}\n}\n",
            "content_base64": "cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJuZXQiCgkic3luYyIKCSJ0aW1lIgoJIm9zIgoJIm9zL3NpZ25hbCIKCSJzeXNjYWxsIgoJInN0cmNvbnYiCgkic3luYy9hdG9taWMiCgkibWF0aC9yYW5kIgopCgpjb25zdCBTdGFydFBvcnQgPSAxMDAwMApjb25zdCBNYXhQYWNrZXRTaXplID0gMTUwMApjb25zdCBTb2NrZXRCdWZmZXJTaXplID0gMjU2KjEwMjQqMTAyNAoKdmFyIG51bUNsaWVudHMgaW50Cgp2YXIgcXVpdCB1aW50NjQKdmFyIHBhY2tldHNTZW50IHVpbnQ2NAp2YXIgcGFja2V0c1JlY2VpdmVkIHVpbnQ2NAoKZnVuYyBHZXRJbnQobmFtZSBzdHJpbmcsIGRlZmF1bHRWYWx1ZSBpbnQpIGludCB7Cgl2YWx1ZVN0cmluZywgb2sgOj0gb3MuTG9va3VwRW52KG5hbWUpCglpZiAhb2sgewoJCXJldHVybiBkZWZhdWx0VmFsdWUKCX0KCXZhbHVlLCBlcnIgOj0gc3RyY29udi5QYXJzZUludCh2YWx1ZVN0cmluZywgMTAsIDY0KQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIGRlZmF1bHRWYWx1ZQoJfQoJcmV0dXJuIGludCh2YWx1ZSkKfQoKZnVuYyBHZXRBZGRyZXNzKG5hbWUgc3RyaW5nLCBkZWZhdWx0VmFsdWUgc3RyaW5nKSBuZXQuVURQQWRkciB7Cgl2YWx1ZVN0cmluZywgb2sgOj0gb3MuTG9va3VwRW52KG5hbWUpCglpZiAhb2sgewoJICAgIHZhbHVlU3RyaW5nID0gZGVmYXVsdFZhbHVlCgl9Cgl2YWx1ZSwgZXJyIDo9IG5ldC5SZXNvbHZlVURQQWRkcigidWRwIiwgdmFsdWVTdHJpbmcpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhmbXQuU3ByaW50ZigiaW52YWxpZCBhZGRyZXNzIGluIGVudnZhciAlcyIsIG5hbWUpKQoJfQoJcmV0dXJuICp2YWx1ZQp9CgpmdW5jIG1haW4oKSB7CgoJc2VydmVyQWRkcmVzcyA6PSBHZXRBZGRyZXNzKCJTRVJWRVJfQUREUkVTUyIsICIxMjcuMC4wLjE6NDAwMDAiKQoKCW51bUNsaWVudHMgPSBHZXRJbnQoIk5VTV9DTElFTlRTIiwgMSkKCglmbXQuUHJpbnRmKCJzdGFydGluZyAlZCBjbGllbnRzXG4iLCBudW1DbGllbnRzKQoKCWZtdC5QcmludGYoInNlcnZlciBhZGRyZXNzIGlzICVzXG4iLCBzZXJ2ZXJBZGRyZXNzLlN0cmluZygpKQoKCXZhciB3ZyBzeW5jLldhaXRHcm91cAoKCWZvciBpIDo9IDA7IGkgPCBudW1DbGllbnRzOyBpKysgewoJCWdvIGZ1bmMoY2xpZW50SW5kZXggaW50KSB7CgkJCXdnLkFkZCgxKQoJCQlydW5DbGllbnQoY2xpZW50SW5kZXgsICZzZXJ2ZXJBZGRyZXNzKQoJCQl3Zy5Eb25lKCkKCQl9KGkpCgl9CgoJdGVybUNoYW4gOj0gbWFrZShjaGFuIG9zLlNpZ25hbCwgMSkKCglzaWduYWwuTm90aWZ5KHRlcm1DaGFuLCBvcy5JbnRlcnJ1cHQsIHN5c2NhbGwuU0lHVEVSTSkKCgl0aWNrZXIgOj0gdGltZS5OZXdUaWNrZXIodGltZS5TZWNvbmQpCiAKCXByZXZfc2VudCA6PSB1aW50NjQoMCkKCXByZXZfcmVjZWl2ZWQgOj0gdWludDY0KDApCgogCWZvciB7CgkJc2VsZWN0IHsKCQljYXNlIDwtdGVybUNoYW46CgkJCWZtdC5QcmludGYoIlxucmVjZWl2ZWQgc2h1dGRvd24gc2lnbmFsXG4iKQoJCQlhdG9taWMuU3RvcmVVaW50NjQoJnF1aXQsIDEpCgkgCWNhc2UgPC10aWNrZXIuQzoKCSAJCXNlbnQgOj0gYXRvbWljLkxvYWRVaW50NjQoJnBhY2tldHNTZW50KQoJIAkJcmVjZWl2ZWQgOj0gYXRvbWljLkxvYWRVaW50NjQoJnBhY2tldHNSZWNlaXZlZCkKCSAJCXNlbnRfZGVsdGEgOj0gc2VudCAtIHByZXZfc2VudAoJIAkJcmVjZWl2ZWRfZGVsdGEgOj0gcmVjZWl2ZWQgLSBwcmV2X3JlY2VpdmVkCgkgCQlmbXQuUHJpbnRmKCJzZW50IGRlbHRhICVkLCByZWNlaXZlZCBkZWx0YSAlZFxuIiwgc2VudF9kZWx0YSwgcmVjZWl2ZWRfZGVsdGEpCgkJCXByZXZfc2VudCA9IHNlbnQKCQkJcHJldl9yZWNlaXZlZCA9IHJlY2VpdmVkCgkgCX0KCQlxdWl0IDo9IGF0b21pYy5Mb2FkVWludDY0KCZxdWl0KQoJCWlmIHF1aXQgIT0gMCB7CgkJCWJyZWFrCgkJfQogCX0KCglmbXQuUHJpbnRmKCJzaHV0dGluZyBkb3duXG4iKQoKCXdnLldhaXQoKQkKCglmbXQuUHJpbnRmKCJkb25lLlxuIikKfQoKZnVuYyBydW5DbGllbnQoY2xpZW50SW5kZXggaW50LCBzZXJ2ZXJBZGRyZXNzICpuZXQuVURQQWRkcikgewoKCWFkZHIgOj0gbmV0LlVEUEFkZHJ7CgkgICAgUG9ydDogU3RhcnRQb3J0ICsgY2xpZW50SW5kZXgsCgkgICAgSVA6ICAgbmV0LlBhcnNlSVAoIjAuMC4wLjAiKSwKCX0KCgljb25uLCBlcnIgOj0gbmV0Lkxpc3RlblVEUCgidWRwIiwgJmFkZHIpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gLy8gSU1QT1JUQU5UOiB0byBnZXQgYXMgbWFueSBjbGllbnRzIGFzIHBvc3NpYmxlIG9uIG9uZSBtYWNoaW5lLCBpZiB3ZSBjYW4ndCBiaW5kIHRvIGEgc3BlY2lmaWMgcG9ydCwganVzdCBpZ25vcmUgYW5kIGNhcnJ5IG9uCgl9CglkZWZlciBjb25uLkNsb3NlKCkKCglpZiBlcnIgOj0gY29ubi5TZXRSZWFkQnVmZmVyKFNvY2tldEJ1ZmZlclNpemUpOyBlcnIgIT0gbmlsIHsKCQlwYW5pYyhmbXQuU3ByaW50ZigiY291bGQgbm90IHNldCBzb2NrZXQgcmVhZCBidWZmZXIgc2l6ZTogJXYiLCBlcnIpKQoJfQoKCWlmIGVyciA6PSBjb25uLlNldFdyaXRlQnVmZmVyKFNvY2tldEJ1ZmZlclNpemUpOyBlcnIgIT0gbmlsIHsKCQlwYW5pYyhmbXQuU3ByaW50ZigiY291bGQgbm90IHNldCBzb2NrZXQgd3JpdGUgYnVmZmVyIHNpemU6ICV2IiwgZXJyKSkKCX0KCglidWZmZXIgOj0gbWFrZShbXWJ5dGUsIE1heFBhY2tldFNpemUpCgoJZ28gZnVuYygpIHsKCQlmb3IgewoJCQlwYWNrZXRCeXRlcywgXywgZXJyIDo9IGNvbm4uUmVhZEZyb21VRFAoYnVmZmVyKQoJCQlpZiBlcnIgIT0gbmlsIHsKCQkJCWJyZWFrCgkJCX0KCQkJaWYgcGFja2V0Qnl0ZXMgIT0gOCB7CgkJCQljb250aW51ZQoJCQl9CgkJCWF0b21pYy5BZGRVaW50NjQoJnBhY2tldHNSZWNlaXZlZCwgMSkKCQl9Cgl9KCkKCglwYWNrZXREYXRhIDo9IG1ha2UoW11ieXRlLCAxMDApCgoJcmFuZC5SZWFkKHBhY2tldERhdGEpCgoJZm9yIHsKCQlxdWl0IDo9IGF0b21pYy5Mb2FkVWludDY0KCZxdWl0KQoJCWlmIHF1aXQgIT0gMCB7CgkJCWJyZWFrCgkJfQoJCWZvciBpIDo9IDA7IGkgPCAxMDsgaSsrIHsKCQkJY29ubi5Xcml0ZVRvVURQKHBhY2tldERhdGFbOl0sIHNlcnZlckFkZHJlc3MpCgkJfQoJCWF0b21pYy5BZGRVaW50NjQoJnBhY2tldHNTZW50LCAxMCkKCQl0aW1lLlNsZWVwKHRpbWUuTWlsbGlzZWNvbmQqMTAwKQoJfQp9Cg==",
            "content_base64sha256": "vIOY/exHCTzEoF25rBwPJJBwLS6CADaaUVP+uiJeq8c=",
            "content_base64sha512": "WJvHNZGoaj3VWDQABmdPi5JlHGraODas7z1qWBYpKeVaQVsSrXyIunjNxEjjGb7KsstsHquKfXB9R78l1Cl1Lw==",
            "content_md5": "113498043ad55008b1a9b0a4c6f429f9",
            "content_sha1": "20bdbd943bca724a7352ff7d2934c38f34b02dab",
            "content_sha256": "bc8398fdec47093cc4a05db9ac1c0f2490702d2e8200369a5153feba225eabc7",
            "content_sha512": "589bc73591a86a3dd558340006674f8b92651c6ada3836acef3d6a58162929e55a415b12ad7c88ba78cdc448e319becab2cb6c1eab8a7d707d47bf25d429752f",
            "filename": "client.go",
            "id": "20bdbd943bca724a7352ff7d2934c38f34b02dab"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "client_service",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "[Unit]\nDescription=UDP Client Service\n\n[Service]\nExecStart=/app/client\nEnvironmentFile=/app/client.env\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
            "content_base64": "W1VuaXRdCkRlc2NyaXB0aW9uPVVEUCBDbGllbnQgU2VydmljZQoKW1NlcnZpY2VdCkV4ZWNTdGFydD0vYXBwL2NsaWVudApFbnZpcm9ubWVudEZpbGU9L2FwcC9jbGllbnQuZW52ClJlc3RhcnQ9YWx3YXlzClJlc3RhcnRTZWM9MzAKVGltZW91dFN0b3BTZWM9OTAK",
            "content_base64sha256": "upZyXfT5BwjEaZud/btXPYuwd3hk1LHyJ7BiRApkD1k=",
            "content_base64sha512": "Z5p3trymeDz58vMjIWWFbV2Ti4jI5U6+H2TerBv1cNfH/XkzesZ9ipla9gW5g2mHSxl7/g7XRG1AiYI+uGgpqA==",
            "content_md5": "58059c2af8bcca9961c2b7ee9e0e2359",
            "content_sha1": "01dfcc806b2027294ac232289acb69eb11154d19",
            "content_sha256": "ba96725df4f90708c4699b9dfdbb573d8bb0777864d4b1f227b062440a640f59",
            "content_sha512": "679a77b6bca6783cf9f2f3232165856d5d938b88c8e54ebe1f64deac1bf570d7c7fd79337ac67d8a995af605b98369874b197bfe0ed7446d4089823eb86829a8",
            "filename": "client.service",
            "id": "01dfcc806b2027294ac232289acb69eb11154d19"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "go_mod",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "module github.com/mas-bandwidth/udp/012\n",
            "content_base64": "bW9kdWxlIGdpdGh1Yi5jb20vbWFzLWJhbmR3aWR0aC91ZHAvMDEyCg==",
            "content_base64sha256": "289oBHwaFQKiDPS+G3ZsLXQRBUvGSfDDG16OoEP2iHk=",
            "content_base64sha512": "fiOv4HI+Akg4SDzO1pEV4QsA69NKUOSUkpqMzOPaPiJIg8gutO159sQgY32If4FZfOca6p1ZTYpEz86XNXMoJQ==",
            "content_md5": "2c7370c371b6999e2b31f595566a4785",
            "content_sha1": "7712ba097f3f1cfeacb34e9fe18af94e7a8a8d01",
            "content_sha256": "dbcf68047c1a1502a20cf4be1b766c2d7411054bc649f0c31b5e8ea043f68879",
            "content_sha512": "7e23afe0723e024838483cced69115e10b00ebd34a50e494929a8ccce3da3e224883c82eb4ed79f6c420637d887f81597ce71aea9d594d8a44cfce9735732825",
            "filename": "go.mod",
            "id": "7712ba097f3f1cfeacb34e9fe18af94e7a8a8d01"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "makefile",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\nKERNEL = $(shell uname -r)\n\n.PHONY: build\nbuild: server.c server_xdp.o\n\tgcc -O2 -g server.c -o server -lxdp /usr/src/linux-headers-$(KERNEL)/tools/bpf/resolve_btfids/libbpf/libbpf.a -lz -lelf\n\nserver_xdp.o: server_xdp.c\n\tclang -O2 -g -Ilibbpf/src -target bpf -c server_xdp.c -o server_xdp.o\n\n.PHONY: clean\nclean:\n\trm -f server\n\trm -f *.o",
            "content_base64": "CktFUk5FTCA9ICQoc2hlbGwgdW5hbWUgLXIpCgouUEhPTlk6IGJ1aWxkCmJ1aWxkOiBzZXJ2ZXIuYyBzZXJ2ZXJfeGRwLm8KCWdjYyAtTzIgLWcgc2VydmVyLmMgLW8gc2VydmVyIC1seGRwIC91c3Ivc3JjL2xpbnV4LWhlYWRlcnMtJChLRVJORUwpL3Rvb2xzL2JwZi9yZXNvbHZlX2J0Zmlkcy9saWJicGYvbGliYnBmLmEgLWx6IC1sZWxmCgpzZXJ2ZXJfeGRwLm86IHNlcnZlcl94ZHAuYwoJY2xhbmcgLU8yIC1nIC1JbGliYnBmL3NyYyAtdGFyZ2V0IGJwZiAtYyBzZXJ2ZXJfeGRwLmMgLW8gc2VydmVyX3hkcC5vCgouUEhPTlk6IGNsZWFuCmNsZWFuOgoJcm0gLWYgc2VydmVyCglybSAtZiAqLm8=",
            "content_base64sha256": "EI1O4bskJC5tZATT7GO09JcJ5f5JySJNq7jhpMmKzEs=",
            "content_base64sha512": "sDPpu2KSEpXd+MU77t9+KdMMsDRAK/2WUm4XmOrnJPJ1w/CLm9N7t2qaaLmtBc1cSljPeNZdKApWB8dM2LIkow==",
            "content_md5": "ccf9e4b4499eefe4a2f7314080af10d9",
            "content_sha1": "53f0ad1f48a0d8efa7b78ab33f1c147a46c92dd3",
            "content_sha256": "108d4ee1bb24242e6d6404d3ec63b4f49709e5fe49c9224dabb8e1a4c98acc4b",
            "content_sha512": "b033e9bb62921295ddf8c53beedf7e29d30cb034402bfd96526e1798eae724f275c3f08b9bd37bb76a9a68b9ad05cd5c4a58cf78d65d280a5607c74cd8b224a3",
            "filename": "Makefile",
            "id": "53f0ad1f48a0d8efa7b78ab33f1c147a46c92dd3"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "server_c",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "/*\n    UDP server XDP program (Userspace)\n\n    Runs on Ubuntu 22.04 LTS 64bit with Linux Kernel 6.5+ *ONLY*\n*/\n\n#include \u003cmemory.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003csignal.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cassert.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cifaddrs.h\u003e\n#include \u003cnet/if.h\u003e\n#include \u003cbpf/bpf.h\u003e\n#include \u003cbpf/libbpf.h\u003e\n#include \u003cxdp/libxdp.h\u003e\n\nstruct bpf_t\n{\n    int interface_index;\n    struct xdp_program * program;\n    bool attached_native;\n    bool attached_skb;\n};\n\nint bpf_init( struct bpf_t * bpf, const char * interface_name )\n{\n    // we can only run xdp programs as root\n\n    if ( geteuid() != 0 ) \n    {\n        printf( \"\\nerror: this program must be run as root\\n\\n\" );\n        return 1;\n    }\n\n    // find the network interface that matches the interface name\n    {\n        bool found = false;\n\n        struct ifaddrs * addrs;\n        if ( getifaddrs( \u0026addrs ) != 0 )\n        {\n            printf( \"\\nerror: getifaddrs failed\\n\\n\" );\n            return 1;\n        }\n\n        for ( struct ifaddrs * iap = addrs; iap != NULL; iap = iap-\u003eifa_next ) \n        {\n            if ( iap-\u003eifa_addr \u0026\u0026 ( iap-\u003eifa_flags \u0026 IFF_UP ) \u0026\u0026 iap-\u003eifa_addr-\u003esa_family == AF_INET )\n            {\n                struct sockaddr_in * sa = (struct sockaddr_in*) iap-\u003eifa_addr;\n                if ( strcmp( interface_name, iap-\u003eifa_name ) == 0 )\n                {\n                    printf( \"found network interface: '%s'\\n\", iap-\u003eifa_name );\n                    bpf-\u003einterface_index = if_nametoindex( iap-\u003eifa_name );\n                    if ( !bpf-\u003einterface_index ) \n                    {\n                        printf( \"\\nerror: if_nametoindex failed\\n\\n\" );\n                        return 1;\n                    }\n                    found = true;\n                    break;\n                }\n            }\n        }\n\n        freeifaddrs( addrs );\n\n        if ( !found )\n        {\n            printf( \"\\nerror: could not find any network interface matching '%s'\", interface_name );\n            return 1;\n        }\n    }\n\n    // load the server_xdp program and attach it to the network interface\n\n    printf( \"loading server_xdp...\\n\" );\n\n    bpf-\u003eprogram = xdp_program__open_file( \"server_xdp.o\", \"server_xdp\", NULL );\n    if ( libxdp_get_error( bpf-\u003eprogram ) ) \n    {\n        printf( \"\\nerror: could not load server_xdp program\\n\\n\");\n        return 1;\n    }\n\n    printf( \"server_xdp loaded successfully.\\n\" );\n\n    printf( \"attaching server_xdp to network interface\\n\" );\n\n    int ret = xdp_program__attach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_NATIVE, 0 );\n    if ( ret == 0 )\n    {\n        bpf-\u003eattached_native = true;\n    } \n    else\n    {\n        printf( \"falling back to skb mode...\\n\" );\n        ret = xdp_program__attach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_SKB, 0 );\n        if ( ret == 0 )\n        {\n            bpf-\u003eattached_skb = true;\n        }\n        else\n        {\n            printf( \"\\nerror: failed to attach server_xdp program to interface\\n\\n\" );\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nvoid bpf_shutdown( struct bpf_t * bpf )\n{\n    assert( bpf );\n\n    if ( bpf-\u003eprogram != NULL )\n    {\n        if ( bpf-\u003eattached_native )\n        {\n            xdp_program__detach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_NATIVE, 0 );\n        }\n        if ( bpf-\u003eattached_skb )\n        {\n            xdp_program__detach( bpf-\u003eprogram, bpf-\u003einterface_index, XDP_MODE_SKB, 0 );\n        }\n        xdp_program__close( bpf-\u003eprogram );\n    }\n}\n\nstatic struct bpf_t bpf;\n\nvolatile bool quit;\n\nvoid interrupt_handler( int signal )\n{\n    (void) signal; quit = true;\n}\n\nvoid clean_shutdown_handler( int signal )\n{\n    (void) signal;\n    quit = true;\n}\n\nstatic void cleanup()\n{\n    bpf_shutdown( \u0026bpf );\n    fflush( stdout );\n}\n\nint main( int argc, char *argv[] )\n{\n    signal( SIGINT,  interrupt_handler );\n    signal( SIGTERM, clean_shutdown_handler );\n    signal( SIGHUP,  clean_shutdown_handler );\n\n    if ( argc != 2 )\n    {\n        printf( \"\\nusage: server \u003cinterface name\u003e\\n\\n\" );\n        return 1;\n    }\n\n    const char * interface_name = argv[1];\n\n    if ( bpf_init( \u0026bpf, interface_name ) != 0 )\n    {\n        cleanup();\n        return 1;\n    }\n\n    while ( !quit )\n    {\n        usleep( 1000000 );\n    }\n\n    cleanup();\n\n    printf( \"\\n\" );\n\n    return 0;\n}\n",
            "content_base64": "LyoKICAgIFVEUCBzZXJ2ZXIgWERQIHByb2dyYW0gKFVzZXJzcGFjZSkKCiAgICBSdW5zIG9uIFVidW50dSAyMi4wNCBMVFMgNjRiaXQgd2l0aCBMaW51eCBLZXJuZWwgNi41KyAqT05MWSoKKi8KCiNpbmNsdWRlIDxtZW1vcnkuaD4KI2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzaWduYWwuaD4KI2luY2x1ZGUgPHN0ZGJvb2wuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgojaW5jbHVkZSA8dW5pc3RkLmg+CiNpbmNsdWRlIDxpZmFkZHJzLmg+CiNpbmNsdWRlIDxuZXQvaWYuaD4KI2luY2x1ZGUgPGJwZi9icGYuaD4KI2luY2x1ZGUgPGJwZi9saWJicGYuaD4KI2luY2x1ZGUgPHhkcC9saWJ4ZHAuaD4KCnN0cnVjdCBicGZfdAp7CiAgICBpbnQgaW50ZXJmYWNlX2luZGV4OwogICAgc3RydWN0IHhkcF9wcm9ncmFtICogcHJvZ3JhbTsKICAgIGJvb2wgYXR0YWNoZWRfbmF0aXZlOwogICAgYm9vbCBhdHRhY2hlZF9za2I7Cn07CgppbnQgYnBmX2luaXQoIHN0cnVjdCBicGZfdCAqIGJwZiwgY29uc3QgY2hhciAqIGludGVyZmFjZV9uYW1lICkKewogICAgLy8gd2UgY2FuIG9ubHkgcnVuIHhkcCBwcm9ncmFtcyBhcyByb290CgogICAgaWYgKCBnZXRldWlkKCkgIT0gMCApIAogICAgewogICAgICAgIHByaW50ZiggIlxuZXJyb3I6IHRoaXMgcHJvZ3JhbSBtdXN0IGJlIHJ1biBhcyByb290XG5cbiIgKTsKICAgICAgICByZXR1cm4gMTsKICAgIH0KCiAgICAvLyBmaW5kIHRoZSBuZXR3b3JrIGludGVyZmFjZSB0aGF0IG1hdGNoZXMgdGhlIGludGVyZmFjZSBuYW1lCiAgICB7CiAgICAgICAgYm9vbCBmb3VuZCA9IGZhbHNlOwoKICAgICAgICBzdHJ1Y3QgaWZhZGRycyAqIGFkZHJzOwogICAgICAgIGlmICggZ2V0aWZhZGRycyggJmFkZHJzICkgIT0gMCApCiAgICAgICAgewogICAgICAgICAgICBwcmludGYoICJcbmVycm9yOiBnZXRpZmFkZHJzIGZhaWxlZFxuXG4iICk7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KCiAgICAgICAgZm9yICggc3RydWN0IGlmYWRkcnMgKiBpYXAgPSBhZGRyczsgaWFwICE9IE5VTEw7IGlhcCA9IGlhcC0+aWZhX25leHQgKSAKICAgICAgICB7CiAgICAgICAgICAgIGlmICggaWFwLT5pZmFfYWRkciAmJiAoIGlhcC0+aWZhX2ZsYWdzICYgSUZGX1VQICkgJiYgaWFwLT5pZmFfYWRkci0+c2FfZmFtaWx5ID09IEFGX0lORVQgKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdHJ1Y3Qgc29ja2FkZHJfaW4gKiBzYSA9IChzdHJ1Y3Qgc29ja2FkZHJfaW4qKSBpYXAtPmlmYV9hZGRyOwogICAgICAgICAgICAgICAgaWYgKCBzdHJjbXAoIGludGVyZmFjZV9uYW1lLCBpYXAtPmlmYV9uYW1lICkgPT0gMCApCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcHJpbnRmKCAiZm91bmQgbmV0d29yayBpbnRlcmZhY2U6ICclcydcbiIsIGlhcC0+aWZhX25hbWUgKTsKICAgICAgICAgICAgICAgICAgICBicGYtPmludGVyZmFjZV9pbmRleCA9IGlmX25hbWV0b2luZGV4KCBpYXAtPmlmYV9uYW1lICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhYnBmLT5pbnRlcmZhY2VfaW5kZXggKSAKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ZiggIlxuZXJyb3I6IGlmX25hbWV0b2luZGV4IGZhaWxlZFxuXG4iICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZyZWVpZmFkZHJzKCBhZGRycyApOwoKICAgICAgICBpZiAoICFmb3VuZCApCiAgICAgICAgewogICAgICAgICAgICBwcmludGYoICJcbmVycm9yOiBjb3VsZCBub3QgZmluZCBhbnkgbmV0d29yayBpbnRlcmZhY2UgbWF0Y2hpbmcgJyVzJyIsIGludGVyZmFjZV9uYW1lICk7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBsb2FkIHRoZSBzZXJ2ZXJfeGRwIHByb2dyYW0gYW5kIGF0dGFjaCBpdCB0byB0aGUgbmV0d29yayBpbnRlcmZhY2UKCiAgICBwcmludGYoICJsb2FkaW5nIHNlcnZlcl94ZHAuLi5cbiIgKTsKCiAgICBicGYtPnByb2dyYW0gPSB4ZHBfcHJvZ3JhbV9fb3Blbl9maWxlKCAic2VydmVyX3hkcC5vIiwgInNlcnZlcl94ZHAiLCBOVUxMICk7CiAgICBpZiAoIGxpYnhkcF9nZXRfZXJyb3IoIGJwZi0+cHJvZ3JhbSApICkgCiAgICB7CiAgICAgICAgcHJpbnRmKCAiXG5lcnJvcjogY291bGQgbm90IGxvYWQgc2VydmVyX3hkcCBwcm9ncmFtXG5cbiIpOwogICAgICAgIHJldHVybiAxOwogICAgfQoKICAgIHByaW50ZiggInNlcnZlcl94ZHAgbG9hZGVkIHN1Y2Nlc3NmdWxseS5cbiIgKTsKCiAgICBwcmludGYoICJhdHRhY2hpbmcgc2VydmVyX3hkcCB0byBuZXR3b3JrIGludGVyZmFjZVxuIiApOwoKICAgIGludCByZXQgPSB4ZHBfcHJvZ3JhbV9fYXR0YWNoKCBicGYtPnByb2dyYW0sIGJwZi0+aW50ZXJmYWNlX2luZGV4LCBYRFBfTU9ERV9OQVRJVkUsIDAgKTsKICAgIGlmICggcmV0ID09IDAgKQogICAgewogICAgICAgIGJwZi0+YXR0YWNoZWRfbmF0aXZlID0gdHJ1ZTsKICAgIH0gCiAgICBlbHNlCiAgICB7CiAgICAgICAgcHJpbnRmKCAiZmFsbGluZyBiYWNrIHRvIHNrYiBtb2RlLi4uXG4iICk7CiAgICAgICAgcmV0ID0geGRwX3Byb2dyYW1fX2F0dGFjaCggYnBmLT5wcm9ncmFtLCBicGYtPmludGVyZmFjZV9pbmRleCwgWERQX01PREVfU0tCLCAwICk7CiAgICAgICAgaWYgKCByZXQgPT0gMCApCiAgICAgICAgewogICAgICAgICAgICBicGYtPmF0dGFjaGVkX3NrYiA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHByaW50ZiggIlxuZXJyb3I6IGZhaWxlZCB0byBhdHRhY2ggc2VydmVyX3hkcCBwcm9ncmFtIHRvIGludGVyZmFjZVxuXG4iICk7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMDsKfQoKdm9pZCBicGZfc2h1dGRvd24oIHN0cnVjdCBicGZfdCAqIGJwZiApCnsKICAgIGFzc2VydCggYnBmICk7CgogICAgaWYgKCBicGYtPnByb2dyYW0gIT0gTlVMTCApCiAgICB7CiAgICAgICAgaWYgKCBicGYtPmF0dGFjaGVkX25hdGl2ZSApCiAgICAgICAgewogICAgICAgICAgICB4ZHBfcHJvZ3JhbV9fZGV0YWNoKCBicGYtPnByb2dyYW0sIGJwZi0+aW50ZXJmYWNlX2luZGV4LCBYRFBfTU9ERV9OQVRJVkUsIDAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKCBicGYtPmF0dGFjaGVkX3NrYiApCiAgICAgICAgewogICAgICAgICAgICB4ZHBfcHJvZ3JhbV9fZGV0YWNoKCBicGYtPnByb2dyYW0sIGJwZi0+aW50ZXJmYWNlX2luZGV4LCBYRFBfTU9ERV9TS0IsIDAgKTsKICAgICAgICB9CiAgICAgICAgeGRwX3Byb2dyYW1fX2Nsb3NlKCBicGYtPnByb2dyYW0gKTsKICAgIH0KfQoKc3RhdGljIHN0cnVjdCBicGZfdCBicGY7Cgp2b2xhdGlsZSBib29sIHF1aXQ7Cgp2b2lkIGludGVycnVwdF9oYW5kbGVyKCBpbnQgc2lnbmFsICkKewogICAgKHZvaWQpIHNpZ25hbDsgcXVpdCA9IHRydWU7Cn0KCnZvaWQgY2xlYW5fc2h1dGRvd25faGFuZGxlciggaW50IHNpZ25hbCApCnsKICAgICh2b2lkKSBzaWduYWw7CiAgICBxdWl0ID0gdHJ1ZTsKfQoKc3RhdGljIHZvaWQgY2xlYW51cCgpCnsKICAgIGJwZl9zaHV0ZG93biggJmJwZiApOwogICAgZmZsdXNoKCBzdGRvdXQgKTsKfQoKaW50IG1haW4oIGludCBhcmdjLCBjaGFyICphcmd2W10gKQp7CiAgICBzaWduYWwoIFNJR0lOVCwgIGludGVycnVwdF9oYW5kbGVyICk7CiAgICBzaWduYWwoIFNJR1RFUk0sIGNsZWFuX3NodXRkb3duX2hhbmRsZXIgKTsKICAgIHNpZ25hbCggU0lHSFVQLCAgY2xlYW5fc2h1dGRvd25faGFuZGxlciApOwoKICAgIGlmICggYXJnYyAhPSAyICkKICAgIHsKICAgICAgICBwcmludGYoICJcbnVzYWdlOiBzZXJ2ZXIgPGludGVyZmFjZSBuYW1lPlxuXG4iICk7CiAgICAgICAgcmV0dXJuIDE7CiAgICB9CgogICAgY29uc3QgY2hhciAqIGludGVyZmFjZV9uYW1lID0gYXJndlsxXTsKCiAgICBpZiAoIGJwZl9pbml0KCAmYnBmLCBpbnRlcmZhY2VfbmFtZSApICE9IDAgKQogICAgewogICAgICAgIGNsZWFudXAoKTsKICAgICAgICByZXR1cm4gMTsKICAgIH0KCiAgICB3aGlsZSAoICFxdWl0ICkKICAgIHsKICAgICAgICB1c2xlZXAoIDEwMDAwMDAgKTsKICAgIH0KCiAgICBjbGVhbnVwKCk7CgogICAgcHJpbnRmKCAiXG4iICk7CgogICAgcmV0dXJuIDA7Cn0K",
            "content_base64sha256": "mKqSg5cSBd7fowisYW0ov5g0Qa5wTcPFo3L6CwxEJsw=",
            "content_base64sha512": "7E3ldH/TsKhaZty3I+Lc25JZ5q4kHzXKRZ37T7W7eB1k1XJtE4vpOlO8kj5nlIJ7VtkSeI2XdhoLG9uI1xhjCA==",
            "content_md5": "bc0fa664afd3016af5aaf2dba036fbec",
            "content_sha1": "721ac0fe0aefff732cf8220e0137d87a309ef2f9",
            "content_sha256": "98aa9283971205dedfa308ac616d28bf983441ae704dc3c5a372fa0b0c4426cc",
            "content_sha512": "ec4de5747fd3b0a85a66dcb723e2dcdb9259e6ae241f35ca459dfb4fb5bb781d64d5726d138be93a53bc923e6794827b56d912788d97761a0b1bdb88d7186308",
            "filename": "server.c",
            "id": "721ac0fe0aefff732cf8220e0137d87a309ef2f9"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "server_service",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "[Unit]\nDescription=UDP Server Service\n\n[Service]\nExecStart=/app/server ens3\nWorkingDirectory=/app\nRestart=always\nRestartSec=30\nTimeoutStopSec=90\n",
            "content_base64": "W1VuaXRdCkRlc2NyaXB0aW9uPVVEUCBTZXJ2ZXIgU2VydmljZQoKW1NlcnZpY2VdCkV4ZWNTdGFydD0vYXBwL3NlcnZlciBlbnMzCldvcmtpbmdEaXJlY3Rvcnk9L2FwcApSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTMwClRpbWVvdXRTdG9wU2VjPTkwCg==",
            "content_base64sha256": "bNw+g79dt/o53+WEn/BijJ+n8uWmOViNFneX05rpfcA=",
            "content_base64sha512": "WwNIIPFonAgaRtBOutylBauU8esFEQ0Nbc3dgWz5zKImxVLvUtP0sYz8q6m4/l6axs+hdKBHc9Grnb5yb88qRg==",
            "content_md5": "415b83ee0cbdbc85f74140c698d4a2b0",
            "content_sha1": "acb0544b86bf606bb6fbef7b6588d86da4b59ffb",
            "content_sha256": "6cdc3e83bf5db7fa39dfe5849ff0628c9fa7f2e5a639588d167797d39ae97dc0",
            "content_sha512": "5b034820f1689c081a46d04ebadca505ab94f1eb05110d0d6dcddd816cf9cca226c552ef52d3f4b18cfcaba9b8fe5e9ac6cfa174a04773d1ab9dbe726fcf2a46",
            "filename": "server.service",
            "id": "acb0544b86bf606bb6fbef7b6588d86da4b59ffb"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "server_xdp_c",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "/*\n    UDP server XDP program\n\n    Replies to 100 byte UDP packets sent to port 40000 with the fnv1a 64bit hash (8 bytes)\n\n    USAGE:\n\n        clang -Ilibbpf/src -g -O2 -target bpf -c server_xdp.c -o server_xdp.o\n        sudo cat /sys/kernel/debug/tracing/trace_pipe\n*/\n\n#include \u003clinux/in.h\u003e\n#include \u003clinux/if_ether.h\u003e\n#include \u003clinux/if_packet.h\u003e\n#include \u003clinux/if_vlan.h\u003e\n#include \u003clinux/ip.h\u003e\n#include \u003clinux/ipv6.h\u003e\n#include \u003clinux/udp.h\u003e\n#include \u003clinux/bpf.h\u003e\n#include \u003clinux/string.h\u003e\n#include \u003cbpf/bpf_helpers.h\u003e\n\n#if defined(__BYTE_ORDER__) \u0026\u0026 defined(__ORDER_LITTLE_ENDIAN__) \u0026\u0026 \\\n    __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n#define bpf_ntohs(x)        __builtin_bswap16(x)\n#define bpf_htons(x)        __builtin_bswap16(x)\n#elif defined(__BYTE_ORDER__) \u0026\u0026 defined(__ORDER_BIG_ENDIAN__) \u0026\u0026 \\\n    __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n#define bpf_ntohs(x)        (x)\n#define bpf_htons(x)        (x)\n#else\n# error \"Endianness detection needs to be set up for your compiler?!\"\n#endif\n\n//#define DEBUG 1\n\n#if DEBUG\n#define debug_printf bpf_printk\n#else // #if DEBUG\n#define debug_printf(...) do { } while (0)\n#endif // #if DEBUG\n\nstatic void reflect_packet( void * data, int payload_bytes )\n{\n    struct ethhdr * eth = data;\n    struct iphdr  * ip  = data + sizeof( struct ethhdr );\n    struct udphdr * udp = (void*) ip + sizeof( struct iphdr );\n\n    __u16 a = udp-\u003esource;\n    udp-\u003esource = udp-\u003edest;\n    udp-\u003edest = a;\n    udp-\u003echeck = 0;\n    udp-\u003elen = bpf_htons( sizeof(struct udphdr) + payload_bytes );\n\n    __u32 b = ip-\u003esaddr;\n    ip-\u003esaddr = ip-\u003edaddr;\n    ip-\u003edaddr = b;\n    ip-\u003etot_len = bpf_htons( sizeof(struct iphdr) + sizeof(struct udphdr) + payload_bytes );\n    ip-\u003echeck = 0;\n\n    char c[ETH_ALEN];\n    memcpy( c, eth-\u003eh_source, ETH_ALEN );\n    memcpy( eth-\u003eh_source, eth-\u003eh_dest, ETH_ALEN );\n    memcpy( eth-\u003eh_dest, c, ETH_ALEN );\n\n    __u16 * p = (__u16*) ip;\n    __u32 checksum = p[0];\n    checksum += p[1];\n    checksum += p[2];\n    checksum += p[3];\n    checksum += p[4];\n    checksum += p[5];\n    checksum += p[6];\n    checksum += p[7];\n    checksum += p[8];\n    checksum += p[9];\n    checksum = ~ ( ( checksum \u0026 0xFFFF ) + ( checksum \u003e\u003e 16 ) );\n    ip-\u003echeck = checksum;\n}\n\nSEC(\"server_xdp\") int server_xdp_filter( struct xdp_md *ctx ) \n{ \n    void * data = (void*) (long) ctx-\u003edata; \n\n    void * data_end = (void*) (long) ctx-\u003edata_end; \n\n    struct ethhdr * eth = data;\n\n    if ( (void*)eth + sizeof(struct ethhdr) \u003c data_end )\n    {\n        if ( eth-\u003eh_proto == __constant_htons(ETH_P_IP) ) // IPV4\n        {\n            struct iphdr * ip = data + sizeof(struct ethhdr);\n\n            if ( (void*)ip + sizeof(struct iphdr) \u003c data_end )\n            {\n                if ( ip-\u003eprotocol == IPPROTO_UDP ) // UDP\n                {\n                    struct udphdr * udp = (void*) ip + sizeof(struct iphdr);\n\n                    if ( (void*)udp + sizeof(struct udphdr) \u003c= data_end )\n                    {\n                        if ( udp-\u003edest == __constant_htons(40000) )\n                        {\n                            void * payload = (void*) udp + sizeof(struct udphdr);\n                            int payload_bytes = data_end - payload;\n                            if ( payload_bytes == 100 )\n                            {\n                                reflect_packet( data, 8 );\n                                bpf_xdp_adjust_tail( ctx, -( payload_bytes - 8 ) );\n                                return XDP_TX;\n                            }\n                            else\n                            {\n                                return XDP_DROP;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return XDP_PASS;\n}\n\nchar _license[] SEC(\"license\") = \"GPL\";\n",
            "content_base64": "LyoKICAgIFVEUCBzZXJ2ZXIgWERQIHByb2dyYW0KCiAgICBSZXBsaWVzIHRvIDEwMCBieXRlIFVEUCBwYWNrZXRzIHNlbnQgdG8gcG9ydCA0MDAwMCB3aXRoIHRoZSBmbnYxYSA2NGJpdCBoYXNoICg4IGJ5dGVzKQoKICAgIFVTQUdFOgoKICAgICAgICBjbGFuZyAtSWxpYmJwZi9zcmMgLWcgLU8yIC10YXJnZXQgYnBmIC1jIHNlcnZlcl94ZHAuYyAtbyBzZXJ2ZXJfeGRwLm8KICAgICAgICBzdWRvIGNhdCAvc3lzL2tlcm5lbC9kZWJ1Zy90cmFjaW5nL3RyYWNlX3BpcGUKKi8KCiNpbmNsdWRlIDxsaW51eC9pbi5oPgojaW5jbHVkZSA8bGludXgvaWZfZXRoZXIuaD4KI2luY2x1ZGUgPGxpbnV4L2lmX3BhY2tldC5oPgojaW5jbHVkZSA8bGludXgvaWZfdmxhbi5oPgojaW5jbHVkZSA8bGludXgvaXAuaD4KI2luY2x1ZGUgPGxpbnV4L2lwdjYuaD4KI2luY2x1ZGUgPGxpbnV4L3VkcC5oPgojaW5jbHVkZSA8bGludXgvYnBmLmg+CiNpbmNsdWRlIDxsaW51eC9zdHJpbmcuaD4KI2luY2x1ZGUgPGJwZi9icGZfaGVscGVycy5oPgoKI2lmIGRlZmluZWQoX19CWVRFX09SREVSX18pICYmIGRlZmluZWQoX19PUkRFUl9MSVRUTEVfRU5ESUFOX18pICYmIFwKICAgIF9fQllURV9PUkRFUl9fID09IF9fT1JERVJfTElUVExFX0VORElBTl9fCiNkZWZpbmUgYnBmX250b2hzKHgpICAgICAgICBfX2J1aWx0aW5fYnN3YXAxNih4KQojZGVmaW5lIGJwZl9odG9ucyh4KSAgICAgICAgX19idWlsdGluX2Jzd2FwMTYoeCkKI2VsaWYgZGVmaW5lZChfX0JZVEVfT1JERVJfXykgJiYgZGVmaW5lZChfX09SREVSX0JJR19FTkRJQU5fXykgJiYgXAogICAgX19CWVRFX09SREVSX18gPT0gX19PUkRFUl9CSUdfRU5ESUFOX18KI2RlZmluZSBicGZfbnRvaHMoeCkgICAgICAgICh4KQojZGVmaW5lIGJwZl9odG9ucyh4KSAgICAgICAgKHgpCiNlbHNlCiMgZXJyb3IgIkVuZGlhbm5lc3MgZGV0ZWN0aW9uIG5lZWRzIHRvIGJlIHNldCB1cCBmb3IgeW91ciBjb21waWxlcj8hIgojZW5kaWYKCi8vI2RlZmluZSBERUJVRyAxCgojaWYgREVCVUcKI2RlZmluZSBkZWJ1Z19wcmludGYgYnBmX3ByaW50awojZWxzZSAvLyAjaWYgREVCVUcKI2RlZmluZSBkZWJ1Z19wcmludGYoLi4uKSBkbyB7IH0gd2hpbGUgKDApCiNlbmRpZiAvLyAjaWYgREVCVUcKCnN0YXRpYyB2b2lkIHJlZmxlY3RfcGFja2V0KCB2b2lkICogZGF0YSwgaW50IHBheWxvYWRfYnl0ZXMgKQp7CiAgICBzdHJ1Y3QgZXRoaGRyICogZXRoID0gZGF0YTsKICAgIHN0cnVjdCBpcGhkciAgKiBpcCAgPSBkYXRhICsgc2l6ZW9mKCBzdHJ1Y3QgZXRoaGRyICk7CiAgICBzdHJ1Y3QgdWRwaGRyICogdWRwID0gKHZvaWQqKSBpcCArIHNpemVvZiggc3RydWN0IGlwaGRyICk7CgogICAgX191MTYgYSA9IHVkcC0+c291cmNlOwogICAgdWRwLT5zb3VyY2UgPSB1ZHAtPmRlc3Q7CiAgICB1ZHAtPmRlc3QgPSBhOwogICAgdWRwLT5jaGVjayA9IDA7CiAgICB1ZHAtPmxlbiA9IGJwZl9odG9ucyggc2l6ZW9mKHN0cnVjdCB1ZHBoZHIpICsgcGF5bG9hZF9ieXRlcyApOwoKICAgIF9fdTMyIGIgPSBpcC0+c2FkZHI7CiAgICBpcC0+c2FkZHIgPSBpcC0+ZGFkZHI7CiAgICBpcC0+ZGFkZHIgPSBiOwogICAgaXAtPnRvdF9sZW4gPSBicGZfaHRvbnMoIHNpemVvZihzdHJ1Y3QgaXBoZHIpICsgc2l6ZW9mKHN0cnVjdCB1ZHBoZHIpICsgcGF5bG9hZF9ieXRlcyApOwogICAgaXAtPmNoZWNrID0gMDsKCiAgICBjaGFyIGNbRVRIX0FMRU5dOwogICAgbWVtY3B5KCBjLCBldGgtPmhfc291cmNlLCBFVEhfQUxFTiApOwogICAgbWVtY3B5KCBldGgtPmhfc291cmNlLCBldGgtPmhfZGVzdCwgRVRIX0FMRU4gKTsKICAgIG1lbWNweSggZXRoLT5oX2Rlc3QsIGMsIEVUSF9BTEVOICk7CgogICAgX191MTYgKiBwID0gKF9fdTE2KikgaXA7CiAgICBfX3UzMiBjaGVja3N1bSA9IHBbMF07CiAgICBjaGVja3N1bSArPSBwWzFdOwogICAgY2hlY2tzdW0gKz0gcFsyXTsKICAgIGNoZWNrc3VtICs9IHBbM107CiAgICBjaGVja3N1bSArPSBwWzRdOwogICAgY2hlY2tzdW0gKz0gcFs1XTsKICAgIGNoZWNrc3VtICs9IHBbNl07CiAgICBjaGVja3N1bSArPSBwWzddOwogICAgY2hlY2tzdW0gKz0gcFs4XTsKICAgIGNoZWNrc3VtICs9IHBbOV07CiAgICBjaGVja3N1bSA9IH4gKCAoIGNoZWNrc3VtICYgMHhGRkZGICkgKyAoIGNoZWNrc3VtID4+IDE2ICkgKTsKICAgIGlwLT5jaGVjayA9IGNoZWNrc3VtOwp9CgpTRUMoInNlcnZlcl94ZHAiKSBpbnQgc2VydmVyX3hkcF9maWx0ZXIoIHN0cnVjdCB4ZHBfbWQgKmN0eCApIAp7IAogICAgdm9pZCAqIGRhdGEgPSAodm9pZCopIChsb25nKSBjdHgtPmRhdGE7IAoKICAgIHZvaWQgKiBkYXRhX2VuZCA9ICh2b2lkKikgKGxvbmcpIGN0eC0+ZGF0YV9lbmQ7IAoKICAgIHN0cnVjdCBldGhoZHIgKiBldGggPSBkYXRhOwoKICAgIGlmICggKHZvaWQqKWV0aCArIHNpemVvZihzdHJ1Y3QgZXRoaGRyKSA8IGRhdGFfZW5kICkKICAgIHsKICAgICAgICBpZiAoIGV0aC0+aF9wcm90byA9PSBfX2NvbnN0YW50X2h0b25zKEVUSF9QX0lQKSApIC8vIElQVjQKICAgICAgICB7CiAgICAgICAgICAgIHN0cnVjdCBpcGhkciAqIGlwID0gZGF0YSArIHNpemVvZihzdHJ1Y3QgZXRoaGRyKTsKCiAgICAgICAgICAgIGlmICggKHZvaWQqKWlwICsgc2l6ZW9mKHN0cnVjdCBpcGhkcikgPCBkYXRhX2VuZCApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICggaXAtPnByb3RvY29sID09IElQUFJPVE9fVURQICkgLy8gVURQCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RydWN0IHVkcGhkciAqIHVkcCA9ICh2b2lkKikgaXAgKyBzaXplb2Yoc3RydWN0IGlwaGRyKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAodm9pZCopdWRwICsgc2l6ZW9mKHN0cnVjdCB1ZHBoZHIpIDw9IGRhdGFfZW5kICkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdWRwLT5kZXN0ID09IF9fY29uc3RhbnRfaHRvbnMoNDAwMDApICkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAqIHBheWxvYWQgPSAodm9pZCopIHVkcCArIHNpemVvZihzdHJ1Y3QgdWRwaGRyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBwYXlsb2FkX2J5dGVzID0gZGF0YV9lbmQgLSBwYXlsb2FkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXlsb2FkX2J5dGVzID09IDEwMCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdF9wYWNrZXQoIGRhdGEsIDggKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicGZfeGRwX2FkanVzdF90YWlsKCBjdHgsIC0oIHBheWxvYWRfYnl0ZXMgLSA4ICkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWERQX1RYOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBYRFBfRFJPUDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gWERQX1BBU1M7Cn0KCmNoYXIgX2xpY2Vuc2VbXSBTRUMoImxpY2Vuc2UiKSA9ICJHUEwiOwo=",
            "content_base64sha256": "RmzR+cQ58h8v6MQ1nUpmmsYNHHQ2twus+iyVplPo2pE=",
            "content_base64sha512": "viP5b7IVBE64OCJvq2HrmVuG5dZ8iqaiiI8e56jTsWxT6/t0pR+HcnvPGmLnNztvZ8Pj3p4z7FMiAA/w49Uu5w==",
            "content_md5": "67a71d8808053424915dd6147d62060b",
            "content_sha1": "2e45154629a87a252d4bdc85fa2ba98372931e89",
            "content_sha256": "466cd1f9c439f21f2fe8c4359d4a669ac60d1c7436b70bacfa2c95a653e8da91",
            "content_sha512": "be23f96fb215044eb838226fab61eb995b86e5d67c8aa6a2888f1ee7a8d3b16c53ebfb74a51f87727bcf1a62e7373b6f67c3e3de9e33ec5322000ff0e3d52ee7",
            "filename": "server_xdp.c",
            "id": "2e45154629a87a252d4bdc85fa2ba98372931e89"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "server_address",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "104.197.52.226",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2024-04-13T14:14:14.795-07:00",
            "description": "",
            "id": "projects/udp-893e78b072e1ff60/regions/us-central1/addresses/server-057-address",
            "ip_version": "",
            "ipv6_endpoint_type": "",
            "name": "server-057-address",
            "network": "",
            "network_tier": "PREMIUM",
            "prefix_length": 0,
            "project": "udp-893e78b072e1ff60",
            "purpose": "",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/addresses/server-057-address",
            "subnetwork": "",
            "timeouts": null,
            "users": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "google_project.udp"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "50000"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2024-04-13T14:14:35.707-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/udp-893e78b072e1ff60/global/firewalls/allow-http",
            "log_config": [],
            "name": "allow-http",
            "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "priority": 1000,
            "project": "udp-893e78b072e1ff60",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/firewalls/allow-http",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": [
              "allow-http"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.udp",
            "google_project.udp"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "22"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2024-04-13T14:14:35.787-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/udp-893e78b072e1ff60/global/firewalls/allow-ssh",
            "log_config": [],
            "name": "allow-ssh",
            "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "priority": 1000,
            "project": "udp-893e78b072e1ff60",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/firewalls/allow-ssh",
            "source_ranges": [
              "130.211.0.0/22",
              "35.191.0.0/16",
              "35.235.240.0/20"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": [
              "allow-ssh"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.udp",
            "google_project.udp"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow_udp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [],
                "protocol": "udp"
              }
            ],
            "creation_timestamp": "2024-04-13T14:14:35.913-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/udp-893e78b072e1ff60/global/firewalls/allow-udp",
            "log_config": [],
            "name": "allow-udp",
            "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "priority": 1000,
            "project": "udp-893e78b072e1ff60",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/firewalls/allow-udp",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": [
              "allow-udp"
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.udp",
            "google_project.udp"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "server",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-minimal-2204-jammy-v20240318",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 10,
                    "type": "pd-balanced"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/zones/us-central1-a/disks/server-057"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Sapphire Rapids",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/udp-893e78b072e1ff60/zones/us-central1-a/instances/server-057",
            "instance_id": "4936626642798201640",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "c3-highcpu-22",
            "metadata": {
              "startup-script": "\n#!/bin/bash\n\nNEEDRESTART_SUSPEND=1 apt autoremove -y\nNEEDRESTART_SUSPEND=1 apt update -y\nNEEDRESTART_SUSPEND=1 apt upgrade -y\nNEEDRESTART_SUSPEND=1 apt dist-upgrade -y\nNEEDRESTART_SUSPEND=1 apt full-upgrade -y\nNEEDRESTART_SUSPEND=1 apt install libcurl3-gnutls-dev build-essential vim golang-go wget libsodium-dev flex bison clang unzip libc6-dev-i386 gcc-12 dwarves libelf-dev pkg-config m4 libpcap-dev net-tools -y\nNEEDRESTART_SUSPEND=1 apt install linux-headers-`uname -r` linux-tools-`uname -r` -y\nNEEDRESTART_SUSPEND=1 apt autoremove -y\n\nsudo cp /sys/kernel/btf/vmlinux /usr/lib/modules/`uname -r`/build/\n\nmkdir /app\ncd /app\ngsutil cp gs://434699063105_udp_source/source-057.zip .\nunzip *.zip\n\nwget https://github.com/xdp-project/xdp-tools/releases/download/v1.4.2/xdp-tools-1.4.2.tar.gz\ntar -zxf xdp-tools-1.4.2.tar.gz\ncd xdp-tools-1.4.2\n./configure\nmake -j \u0026\u0026 make install\n\ncd lib/libbpf/src\nmake -j \u0026\u0026 make install\nldconfig\n\ncd /app\nmake\n\ncp server.service /etc/systemd/system/server.service\n\nsystemctl daemon-reload\n\nsystemctl start server.service\n\n"
            },
            "metadata_fingerprint": "i4VagMi_zWM=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "server-057",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "104.197.52.226",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
                "network_ip": "10.0.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/subnetworks/udp",
                "subnetwork_project": "udp-893e78b072e1ff60"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "udp-893e78b072e1ff60",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/zones/us-central1-a/instances/server-057",
            "service_account": [
              {
                "email": "udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "allow-ssh",
              "allow-udp"
            ],
            "tags_fingerprint": "ST4TYoaGbzQ=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "us-central1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_address.server_address",
            "google_compute_network.udp",
            "google_compute_subnetwork.udp",
            "google_project.udp",
            "google_service_account.udp_runtime"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance_template",
      "name": "client",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "advanced_machine_features": [],
            "can_ip_forward": false,
            "confidential_instance_config": null,
            "description": "",
            "disk": [
              {
                "auto_delete": true,
                "boot": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key": [],
                "disk_name": "",
                "disk_size_gb": 0,
                "disk_type": "pd-ssd",
                "interface": "SCSI",
                "labels": null,
                "mode": "READ_WRITE",
                "provisioned_iops": 0,
                "resource_policies": null,
                "source": "",
                "source_image": "projects/ubuntu-os-cloud/global/images/family/ubuntu-minimal-2204-lts",
                "source_image_encryption_key": [],
                "source_snapshot": "",
                "source_snapshot_encryption_key": [],
                "type": "PERSISTENT"
              }
            ],
            "effective_labels": {},
            "guest_accelerator": [],
            "id": "projects/udp-893e78b072e1ff60/global/instanceTemplates/client-057",
            "instance_description": "",
            "labels": null,
            "machine_type": "n1-standard-8",
            "metadata": {
              "startup-script": "#!/bin/bash\nNEEDRESTART_SUSPEND=1 apt update -y\nNEEDRESTART_SUSPEND=1 apt upgrade -y\nNEEDRESTART_SUSPEND=1 apt install golang-go unzip -y\nmkdir /app\ncd /app\ngsutil cp gs://434699063105_udp_source/source-057.zip .\nunzip *.zip\nexport HOME=/app\ngo get\ngo build client.go\ncat \u003c\u003cEOF \u003e /app/client.env\nNUM_CLIENTS=1000\nSERVER_ADDRESS=10.0.0.2:40000\nEOF\ncat \u003c\u003cEOF \u003e /etc/sysctl.conf\nnet.core.rmem_max=1000000000\nnet.core.wmem_max=1000000000\nnet.core.netdev_max_backlog=10000\nEOF\nsysctl -p\ncp client.service /etc/systemd/system/client.service\nsystemctl daemon-reload\nsystemctl start client.service\n"
            },
            "metadata_fingerprint": "eBAchf5QS1Y=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "client-057",
            "name_prefix": null,
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
                "network_ip": "",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/subnetworks/udp",
                "subnetwork_project": "udp-893e78b072e1ff60"
              }
            ],
            "network_performance_config": [],
            "project": "udp-893e78b072e1ff60",
            "region": "us-central1",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/instanceTemplates/client-057",
            "self_link_unique": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/instanceTemplates/client-057?uniqueId=5322105571136457531",
            "service_account": [
              {
                "email": "udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [],
            "tags": [
              "allow-ssh"
            ],
            "tags_fingerprint": "",
            "terraform_labels": {},
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "google_compute_address.server_address",
            "google_compute_instance.server",
            "google_compute_network.udp",
            "google_compute_subnetwork.udp",
            "google_project.udp",
            "google_service_account.udp_runtime"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "udp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": false,
            "delete_default_routes_on_create": false,
            "description": "",
            "enable_ula_internal_ipv6": false,
            "gateway_ipv4": "",
            "id": "projects/udp-893e78b072e1ff60/global/networks/udp",
            "internal_ipv6_range": "",
            "mtu": 0,
            "name": "udp",
            "network_firewall_policy_enforcement_order": "AFTER_CLASSIC_FIREWALL",
            "project": "udp-893e78b072e1ff60",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_project.udp"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_region_instance_group_manager",
      "name": "client",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_healing_policies": [],
            "base_instance_name": "client",
            "description": "",
            "distribution_policy_target_shape": "EVEN",
            "distribution_policy_zones": [
              "us-central1-a"
            ],
            "fingerprint": "8QuWvdxYUss=",
            "id": "projects/udp-893e78b072e1ff60/regions/us-central1/instanceGroupManagers/client",
            "instance_group": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/instanceGroups/client",
            "instance_lifecycle_policy": [
              {
                "force_update_on_repair": "NO"
              }
            ],
            "list_managed_instances_results": "PAGELESS",
            "name": "client",
            "named_port": [],
            "project": "udp-893e78b072e1ff60",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/instanceGroupManagers/client",
            "stateful_disk": [],
            "status": [
              {
                "is_stable": false,
                "stateful": [
                  {
                    "has_stateful_config": false,
                    "per_instance_configs": [
                      {
                        "all_effective": true
                      }
                    ]
                  }
                ],
                "version_target": [
                  {
                    "is_reached": true
                  }
                ]
              }
            ],
            "target_pools": null,
            "target_size": 100,
            "timeouts": null,
            "update_policy": [
              {
                "instance_redistribution_type": "PROACTIVE",
                "max_surge_fixed": 10,
                "max_surge_percent": 0,
                "max_unavailable_fixed": 0,
                "max_unavailable_percent": 0,
                "minimal_action": "REPLACE",
                "most_disruptive_allowed_action": "REPLACE",
                "replacement_method": "SUBSTITUTE",
                "type": "PROACTIVE"
              }
            ],
            "version": [
              {
                "instance_template": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/instanceTemplates/client-057",
                "name": "primary",
                "target_size": []
              }
            ],
            "wait_for_instances": false,
            "wait_for_instances_status": "STABLE"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjkwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_address.server_address",
            "google_compute_instance.server",
            "google_compute_instance_template.client",
            "google_compute_network.udp",
            "google_compute_subnetwork.udp",
            "google_project.udp",
            "google_service_account.udp_runtime"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_router",
      "name": "router",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bgp": [],
            "creation_timestamp": "2024-04-13T14:14:35.808-07:00",
            "description": "",
            "encrypted_interconnect_router": false,
            "id": "projects/udp-893e78b072e1ff60/regions/us-central1/routers/router-to-internet",
            "name": "router-to-internet",
            "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "project": "udp-893e78b072e1ff60",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/routers/router-to-internet",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.udp",
            "google_project.udp"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_router_nat",
      "name": "nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "drain_nat_ips": null,
            "enable_dynamic_port_allocation": false,
            "enable_endpoint_independent_mapping": false,
            "icmp_idle_timeout_sec": 30,
            "id": "udp-893e78b072e1ff60/us-central1/router-to-internet/nat",
            "log_config": [],
            "max_ports_per_vm": 0,
            "min_ports_per_vm": 0,
            "name": "nat",
            "nat_ip_allocate_option": "AUTO_ONLY",
            "nat_ips": null,
            "project": "udp-893e78b072e1ff60",
            "region": "us-central1",
            "router": "router-to-internet",
            "rules": [],
            "source_subnetwork_ip_ranges_to_nat": "ALL_SUBNETWORKS_ALL_IP_RANGES",
            "subnetwork": [],
            "tcp_established_idle_timeout_sec": 1200,
            "tcp_time_wait_timeout_sec": 120,
            "tcp_transitory_idle_timeout_sec": 30,
            "timeouts": null,
            "udp_idle_timeout_sec": 30
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.udp",
            "google_compute_router.router",
            "google_project.udp"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "udp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2024-04-13T14:14:36.000-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.0.0.1",
            "id": "projects/udp-893e78b072e1ff60/regions/us-central1/subnetworks/udp",
            "internal_ipv6_prefix": "",
            "ip_cidr_range": "10.0.0.0/16",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "udp",
            "network": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/global/networks/udp",
            "private_ip_google_access": true,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "udp-893e78b072e1ff60",
            "purpose": "PRIVATE",
            "region": "us-central1",
            "role": "",
            "secondary_ip_range": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/udp-893e78b072e1ff60/regions/us-central1/subnetworks/udp",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.udp",
            "google_project.udp"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project",
      "name": "udp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "auto_create_network": true,
            "billing_account": "012279-A33489-722F96",
            "effective_labels": {},
            "folder_id": "",
            "id": "projects/udp-893e78b072e1ff60",
            "labels": {},
            "name": "UDP Test",
            "number": "548160668676",
            "org_id": "434699063105",
            "project_id": "udp-893e78b072e1ff60",
            "skip_delete": null,
            "terraform_labels": {},
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJyZWFkIjo2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "random_id.postfix"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "udp_runtime_compute_viewer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwYWAMFSus4=",
            "id": "udp-893e78b072e1ff60/roles/compute.viewer/serviceAccount:udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "member": "serviceAccount:udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "project": "udp-893e78b072e1ff60",
            "role": "roles/compute.viewer"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "google_project.udp",
            "google_service_account.udp_runtime",
            "random_id.postfix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_service",
      "name": "udp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": true,
            "id": "udp-893e78b072e1ff60/compute.googleapis.com",
            "project": "udp-893e78b072e1ff60",
            "service": "compute.googleapis.com",
            "timeouts": {
              "create": "30m",
              "delete": null,
              "read": null,
              "update": "40m"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoyNDAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "google_project.udp",
            "random_id.postfix"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": true,
            "id": "udp-893e78b072e1ff60/storage.googleapis.com",
            "project": "udp-893e78b072e1ff60",
            "service": "storage.googleapis.com",
            "timeouts": {
              "create": "30m",
              "delete": null,
              "read": null,
              "update": "40m"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoyNDAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "google_project.udp",
            "random_id.postfix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account",
      "name": "udp_runtime",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "udp-runtime",
            "description": "",
            "disabled": false,
            "display_name": "UDP Runtime Service Account",
            "email": "udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "id": "projects/udp-893e78b072e1ff60/serviceAccounts/udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "member": "serviceAccount:udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "name": "projects/udp-893e78b072e1ff60/serviceAccounts/udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "project": "udp-893e78b072e1ff60",
            "timeouts": null,
            "unique_id": "115973788623272867108"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "google_project.udp",
            "random_id.postfix"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "source",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "autoclass": [],
            "cors": [],
            "custom_placement_config": [],
            "default_event_based_hold": false,
            "effective_labels": {},
            "encryption": [],
            "force_destroy": true,
            "id": "434699063105_udp_source",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US",
            "logging": [],
            "name": "434699063105_udp_source",
            "project": "udp-893e78b072e1ff60",
            "public_access_prevention": "enforced",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/434699063105_udp_source",
            "storage_class": "STANDARD",
            "terraform_labels": {},
            "timeouts": null,
            "uniform_bucket_level_access": true,
            "url": "gs://434699063105_udp_source",
            "versioning": [],
            "website": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsInJlYWQiOjI0MDAwMDAwMDAwMCwidXBkYXRlIjoyNDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "google_project.udp",
            "random_id.postfix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket_iam_member",
      "name": "udp_runtime_storage_admin",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "b/434699063105_udp_source",
            "condition": [],
            "etag": "CAI=",
            "id": "b/434699063105_udp_source/roles/storage.objectAdmin/serviceAccount:udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "member": "serviceAccount:udp-runtime@udp-893e78b072e1ff60.iam.gserviceaccount.com",
            "role": "roles/storage.objectAdmin"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "google_project.udp",
            "google_service_account.udp_runtime",
            "google_storage_bucket.source",
            "random_id.postfix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket_object",
      "name": "source_zip",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "434699063105_udp_source",
            "cache_control": "",
            "content": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "application/zip",
            "crc32c": "5Cvx5A==",
            "customer_encryption": [],
            "detect_md5hash": "scYsJjmrGR7M+BDX6QI6Sw==",
            "event_based_hold": false,
            "id": "434699063105_udp_source-source-057.zip",
            "kms_key_name": "",
            "md5hash": "scYsJjmrGR7M+BDX6QI6Sw==",
            "media_link": "https://storage.googleapis.com/download/storage/v1/b/434699063105_udp_source/o/source-057.zip?generation=1713042350852212\u0026alt=media",
            "metadata": {},
            "name": "source-057.zip",
            "output_name": "source-057.zip",
            "self_link": "https://www.googleapis.com/storage/v1/b/434699063105_udp_source/o/source-057.zip",
            "source": "source-057.zip",
            "storage_class": "STANDARD",
            "temporary_hold": false,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_project.udp",
            "google_storage_bucket.source",
            "random_id.postfix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_id",
      "name": "postfix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "b64_std": "iT54sHLh/2A=",
            "b64_url": "iT54sHLh_2A",
            "byte_length": 8,
            "dec": "9889474530989178720",
            "hex": "893e78b072e1ff60",
            "id": "iT54sHLh_2A",
            "keepers": null,
            "prefix": null
          },
          "sensitive_attributes": [],
          "create_before_destroy": true
        }
      ]
    }
  ],
  "check_results": null
}
